---
   - name: Setup a mysql replication 
     hosts: all
     vars_files:
      - mysql-vars.yaml

     tasks:
     - name: Install percona repository for mysql
       shell: "yum install -y https://repo.percona.com/yum/percona-release-latest.noarch.rpm"
       when: ansible_os_family == "RedHat"

     - name: Disable mysql module for RHEL 8
       shell: "dnf module -y disable mysql"
       when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "8"

     - name: Install mysql percona server
       yum: 
        name: Percona-Server-server-57
        state: present
       when: ansible_os_family == "RedHat"

     - name: Backup configuration files
       shell: "cp {{ mysql_config_dir }}/{{ mysql_config_file }} {{ mysql_config_dir }}/{{ mysql_config_file }}.bck "

     - name: Create custom mysqld.cnf file 
       copy:
        src: 'templates/mysqld.cnf'
        dest: "{{ mysql_config_dir }}/{{ mysql_config_file }}" 
        force: yes

     - name: Create the source config file
       template:
        src: 'templates/source.j2'
        dest: "{{ mysql_config_dir }}/source.cnf"

     - name: Create the replica config file
       template:
        src: 'templates/replica.j2'
        dest: "{{ mysql_config_dir }}/replica.cnf"

     - name: Create datadir for instance {{ item.name }}
       file:
        path: "{{ item.datadir }}"
        state: directory
        mode: 0751
        owner: mysql
        group: mysql
        recurse: yes
       with_items:
        - "{{ source }} "
        - "{{ replica }}"
       
     - name: Initialize datadir for instance {{ item.name }}
       shell: "mysqld --initialize-insecure --basedir=/usr --datadir={{ item.datadir }} --console"
       ignore_errors: yes
       with_items:
        - "{{ source }} "
        - "{{ replica }}"

     - name: start service for instance {{ item }}
       service:
        name: mysqld@{{ item }}
        state: started
       with_items:
        - "{{ source.name }}"
        - "{{ replica.name }}"

       
    #  - name: install pip
    #    apt:
    #     name: python3-pip
    #     state: present

    # # this is the required pip package
     
    #  - name: install module
    #    pip:
    #     name: PyMySQL


     - name: Create replica user in source instance and grant replication privillege
       mysql_user:
        login_user: "{{ mysql_user }}"
        login_password: ""
        login_port: "{{ source.port }}"
        login_host: 127.0.0.1
        priv: "*.*:REPLICATION SLAVE"
        name: "{{  mysql_rpl_user }}"
        password: "{{ mysql_rpl_pass }}"
        state: present

     - name: Get sources binary log file name and current position
       mysql_replication:
        mode: getprimary
       register: coordinates

     - name: debug a varible
       debug: 
        msg: "{{ coordinates }}"

     - name: "change master: point replica to master"
       mysql_replication:
        mode: changeprimary
        login_user: "{{ mysql_user }}"
        login_password: ""
        login_port: "{{ replica.port }}"
        primary_host: 127.0.0.1
        primary_port: "{{ source.port  }}"
        primary_user: "{{ mysql_rpl_user }}"
        primary_password: "{{ mysql_rpl_pass }}"
        primary_log_file: "{{ coordinates.File }}"
        primary_log_pos: "{{ coordinates.Position }}"

     # Check Before 
     - name: Check replica replication status
       mysql_replication:
        mode: getreplica
        login_user: "{{ mysql_user }}"
        login_password: ""
        login_port: "{{ replica.port  }}"
       ignore_errors: true
       register: replica_before

     - name: debug a replica before
       debug: 
        msg: "{{ replica_before }}"

     - name: Start replication 
       mysql_replication:
        mode: startreplica
        login_user: "{{ mysql_user }}"
        login_password: ""
        login_port: "{{ replica.port  }}"
       ignore_errors: true
      
     # Check After 
     - name: Check replica replication status.
       mysql_replication:
        mode: getreplica
        login_user: "{{ mysql_user}}"
        login_password: ""
        login_port: "{{ replica.port  }}"
       ignore_errors: true
       register: replica_after

     - name: debug a replica after
       debug: 
        msg: "{{ replica_after }}"